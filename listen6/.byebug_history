exit
new_object.parent_object_id
original.object_id
new_object.parent_object_id
next
original.object_id
@collection[:cargo_train][8].object_id
original
continue
@collection[:cargo_train][8].object_id
original.object_id
new_object.parent_object_id
next
original
continue
@collection[:cargo_train][8].object_id
@collection[:cargo_train][8]
@collection[:cargo_train]
new_object.parent_object_id
original.object_id
object.object_id
new_object.parent_object_id
next
new_object.parent_object_id
original.object_id
original
continue
original
continue
new_object
next
continue
original
original.object_id
continue
exit
original.object_id
object.parent_object_id
exit
@collection[:cargo_train]
@collection
original.saved_key
object.saved_key
object.parent_object_id
original.object_id
original
exit
delete_wagon
valid?(wagon)
valid(wagon)
wagon
next
wagon
next
exit
self.train
train
exit
*
train
valid?
next
continue
trains[0]
id
trains
continue
original.object_id
object.parent_object_id
continue
stations.select { |station| [3,4].include? station.saved_key }
stations.map(&:saved_key)
stations.map(&saved_key)
stations
stored_stations_keys
next
exit
continue
original
continue
original
continue
original
exit
*
update
continue
valid?
exit
update
valid?
exit
update
valid?
route
next
station
next
exit
route.stations.map(&:saved_key)
route.stations
route.stations(&:saved_key)
stored_stations_keys
stored_stations_keys.size
next
stations.size
stations
next
exit
route.stations.size
stations.size
stations = Model::Station.list
original.children_object_id
original.object_id
object.object_id
continue
object.saved_key
continue
exit
@collection[key].keys
object
exit
@collection[key].keys
@collection[key]
object&.saved_key
object
exit
self
station
continue
station
self
continue
self
continue
station
continue
station
self
continue
self
station
continue
station
self
object
continue
object
station
exit
station.valid?
exit
station.valid?
exit
station.valid!
station.valid?
station
exit
station.valid?
station
exit
original
collection
collecgtion
continue
collection
continue
collection.empty?
collection.emyty?
continue
collection.empty?
exit
list
@collection[key].values.empty?
@collection[key].values
@collection[key]values
@collection[key][values]
@collection[key]
p list
list.inspect
list
exit
@collection[key].values
continue
object.valid!
continue
@collection
object.valid!
exit
a.each {|x| x }
a.each {|x| print x, " -- " }
a = [ "a", "b", "c" ]
@collection[key].values
original
continue
exit
object.valid!
object.class
object.valid!
object
object.valid!
object
continue
object
continue
object
exit
original
exit
original
new_object
continue
new_object
next
exit
new_object.saved_key = @index
new_object
next
Marshal::load(Marshal.dump(original))
Marchal::load(Marshal.dump(original))
